Bugs:

we should have a comment on the general design

when we show values or changes, save the previous cursor, 
and when we go back and haven't moved, set the cursor back to the previous one
`m = a.[b].c` (F) `m = [42]` (F) `m = a.[b].c`
`m = a.[b].c` (F) `m = [42]` (A) `[m] = 42` (F) `[m] = a.b.c`

implement strings, then test combinations of arrays, structs, pointers, and strings
casts
only the elements of dot operator and pointer dereference and array index get added to execution stack
array index line order is wrong

need to implement map_memory_to_changes and map_memory_to_uses
malloc and free
dynamic arrays

do while loop not implemented, use an if (true) for the first cycle

true and false keywords not implemented

parens not implemented

increment and decrement, and unary minus and not operators not implemented
bitwise & and bitwise |

someday port to C through WebAssembly, for faster running and printing

Ideas:

make a comma operator, see how parsing looks like

add page up and page down
speed up scrolling when holding down W or D

pressing M makes the prev/next use/change check memory instead of ident
needs visual feedback

pressing Q will show the value of the ident under the inspection cursor or a repeated expression

make an example that uses a lot of binary operations in a conditional

make a demo where we solve a nasty bug

we could contract nested if statements to reduce indentation, but declarations in them have to be transformed

pressing a button when the cursor is on an ident shows the value of that ident at that point in time
especially when it's the left hand side of an assign or opassign

we could set the execution to scroll automatically by some speed, and maybe bounce between flowpoints

we could find the bug, fix it live, recompile, and run directly from the buggy place to check if it was fixed